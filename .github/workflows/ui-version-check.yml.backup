name: UI Version Check Tool

on:
  workflow_dispatch:
    inputs:
      lead_source:
        description: 'Lead Source'
        required: true
        type: choice
        options:
          - organic
          - evo_native
        default: 'organic'
      
      config_path:
        description: 'Config Path (evo, win, evo_native, winback)'
        required: true
        type: choice
        options:
          - evo
          - win
          - evo_native
          - winback
        default: 'evo'
      
      lender_config_id:
        description: 'Lender Config ID'
        required: true
        type: string
        default: '9054'
      
      workflow_mode:
        description: 'Analysis Mode'
        required: true
        type: choice
        options:
          - complete
          - ab-testing
          - journey
        default: 'complete'
      
      use_remote:
        description: 'Use Remote GitHub API (instead of local files)'
        required: false
        type: boolean
        default: false
      
      environment_name:
        description: 'GitHub Environment (where TS_TOKEN is configured)'
        required: false
        type: string
        default: 'production'
      
      repository_name:
        description: 'Repository containing configurations'
        required: false
        type: choice
        options:
          - tsocial/digital_journey
          - tsocial/decision_engine
        default: 'tsocial/digital_journey'

jobs:
  ui-version-check:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment_name }}  # Configurable environment for TS_TOKEN access
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Set up Java (for PlantUML)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('go.sum', 'go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Setup Sample Configuration Data
      run: |
        echo "🔧 Setting up sample configuration data..."
        mkdir -p vendor/configs/evo
        
        # Create sample configuration files for testing
        cat > vendor/configs/evo/9054_organic.json << 'EOF'
        {
          "id": 9054,
          "name": "v1.0.collect.organic",
          "tags": [
            {"name": "lead_source", "value": "organic"},
            {"name": "flow_type", "value": "collect"}
          ],
          "ui_version": "v9.1.5.0",
          "ui_flow": [
            "otp",
            "app_form.basic_info",
            "ekyc.selfie.active",
            "inform.success",
            "esign.review"
          ],
          "ui_flow_settings": {},
          "weight": 100
        }
        EOF
        
        cat > vendor/configs/evo/9012_organic.json << 'EOF'
        {
          "id": 9012,
          "name": "v1.0.diff_nation_id",
          "tags": [
            {"name": "lead_source", "value": "organic"},
            {"name": "flow_type", "value": "diff_nation_id"}
          ],
          "ui_version": "v9.1.4.0",
          "ui_flow": [
            "otp",
            "app_form.basic_info",
            "ekyc.selfie.active"
          ],
          "ui_flow_settings": {},
          "weight": 50
        }
        EOF
        
        echo "✅ Sample configuration created"
        echo "📁 Vendor configs:"
        find vendor/configs -name "*.json" | head -10
    
    - name: Build UI Version Check Tool
      run: |
        make build
        chmod +x bin/ui-version-check
    
    - name: Debug Token Configuration
      run: |
        echo "🔍 Debugging Token Configuration..."
        echo "=================================="
        echo "Available tokens:"
        echo "- TS_TOKEN: $([ -n '${{ secrets.TS_TOKEN }}' ] && echo 'CONFIGURED' || echo 'NOT SET')"
        echo "- TSOCIAL_ACCESS_TOKEN: $([ -n '${{ secrets.TSOCIAL_ACCESS_TOKEN }}' ] && echo 'CONFIGURED' || echo 'NOT SET')"
        echo "- GITHUB_TOKEN: $([ -n '${{ secrets.GITHUB_TOKEN }}' ] && echo 'CONFIGURED' || echo 'NOT SET')"
        echo ""
        echo "Testing repository access..."
        
        # Test different repository URLs
        for repo_url in \
          "https://api.github.com/repos/tsocial/digital_journey" \
          "https://api.github.com/repos/tsocial/decision_engine" \
          "https://api.github.com/repos/tsocial/digital-journey" \
          "https://api.github.com/repos/thao-phan-ts/digital_journey"; do
          
          echo "Testing: $repo_url"
          curl -s -H "Authorization: token ${{ secrets.TS_TOKEN || secrets.TSOCIAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "$repo_url" | head -5 || echo "Failed to access $repo_url"
          echo ""
        done
    
    - name: List Available Options (for reference)
      run: |
        echo "🔍 Available Configuration Options:"
        echo "=================================="
        ./bin/ui-version-check -list-options -config-path ${{ github.event.inputs.config_path }} -remote=${{ github.event.inputs.use_remote }} || {
          echo "⚠️  Remote access failed, this might be due to repository permissions."
          echo "💡 To fix this, add a TS_TOKEN secret with access to the tsocial organization."
          echo "📖 See workflow documentation for setup instructions."
        }
      env:
        GITHUB_TOKEN: ${{ secrets.TS_TOKEN || secrets.TSOCIAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
        CONFIG_REMOTE_URL: https://api.github.com/repos/tsocial/digital_journey
    
    - name: Validate Configuration
      run: |
        echo "🔍 Validating Configuration..."
        echo "============================="
        
        # Test if we can access the specific config
        echo "Testing access to config ${{ github.event.inputs.lender_config_id }} with lead source ${{ github.event.inputs.lead_source }}..."
        
        # Try to load the specific config (this will fail fast if there are issues)
        ./bin/ui-version-check \
          -config ${{ github.event.inputs.lender_config_id }} \
          -lead-source ${{ github.event.inputs.lead_source }} \
          -config-path ${{ github.event.inputs.config_path }} \
          -mode ab-testing \
          -remote=false \
          -output ./test_output || {
          echo "❌ Configuration validation failed!"
          echo "💡 This usually means:"
          echo "  - The lender config ID doesn't exist"
          echo "  - The lead source is not valid for this config"
          echo "  - Repository access issues"
          echo ""
          echo "🔧 Try running 'List Configuration Options' first to see available options."
          exit 1
        }
        
        echo "✅ Configuration validation passed!"
        rm -rf ./test_output
      env:
        GITHUB_TOKEN: ${{ secrets.TS_TOKEN || secrets.TSOCIAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
        CONFIG_REMOTE_URL: https://api.github.com/repos/${{ github.event.inputs.repository_name }}
    
    - name: Run UI Version Analysis
      run: |
        echo "🚀 Starting UI Version Analysis..."
        echo "=================================="
        echo "Lead Source: ${{ github.event.inputs.lead_source }}"
        echo "Config Path: ${{ github.event.inputs.config_path }}"
        echo "Lender Config ID: ${{ github.event.inputs.lender_config_id }}"
        echo "Workflow Mode: ${{ github.event.inputs.workflow_mode }}"
        echo "Use Remote: ${{ github.event.inputs.use_remote }}"
        echo ""
        
        # Create output directory
        mkdir -p ./results
        echo "📁 Created output directory: ./results"
        
        # Run analysis with detailed error handling
        echo "🔧 Running analysis command..."
        set +e  # Don't exit on error, we want to capture it
        ./bin/ui-version-check \
          -config ${{ github.event.inputs.lender_config_id }} \
          -lead-source ${{ github.event.inputs.lead_source }} \
          -config-path ${{ github.event.inputs.config_path }} \
          -mode ${{ github.event.inputs.workflow_mode }} \
          -remote=false \
          -output ./results
        
        ANALYSIS_EXIT_CODE=$?
        set -e  # Re-enable exit on error
        
        echo ""
        echo "📊 Analysis Exit Code: $ANALYSIS_EXIT_CODE"
        
        if [ $ANALYSIS_EXIT_CODE -ne 0 ]; then
          echo "❌ Analysis failed with exit code $ANALYSIS_EXIT_CODE"
          echo "🔍 Checking what files were created..."
          ls -la ./results/ || echo "No results directory found"
          
          echo ""
          echo "🛠️ Debugging Information:"
          echo "- Binary exists: $(test -f ./bin/ui-version-check && echo 'YES' || echo 'NO')"
          echo "- Binary executable: $(test -x ./bin/ui-version-check && echo 'YES' || echo 'NO')"
          echo "- Current directory: $(pwd)"
          echo "- Available disk space: $(df -h . | tail -1)"
          
          echo ""
          echo "💡 Possible solutions:"
          echo "1. Check if the lender config ID exists in the specified path"
          echo "2. Verify the lead source is valid for this configuration"
          echo "3. Ensure the remote repository is accessible"
          echo "4. Try with a different analysis mode (e.g., 'ab-testing' instead of 'complete')"
          
          exit $ANALYSIS_EXIT_CODE
        else
          echo "✅ Analysis completed successfully!"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.TS_TOKEN || secrets.TSOCIAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
        CONFIG_REMOTE_URL: https://api.github.com/repos/${{ github.event.inputs.repository_name }}
    
    - name: Upload Analysis Results
      uses: actions/upload-artifact@v4
      if: always() && hashFiles('results/**/*') != ''
      with:
        name: ui-version-analysis-results-${{ github.event.inputs.lender_config_id }}-${{ github.event.inputs.lead_source }}
        path: |
          results/
          !results/**/*.jar
        retention-days: 30
    
    - name: Display Results Summary
      if: always()
      run: |
        echo "📊 Analysis Results Summary"
        echo "=========================="
        echo "Configuration: ${{ github.event.inputs.lender_config_id }} (${{ github.event.inputs.lead_source }})"
        echo "Mode: ${{ github.event.inputs.workflow_mode }}"
        echo "Config Path: ${{ github.event.inputs.config_path }}"
        echo ""
        
        # Check if results directory exists
        if [ -d "results" ]; then
          echo "📁 Results directory contents:"
          ls -la results/ || echo "Results directory is empty"
          echo ""
        else
          echo "❌ No results directory found"
        fi
        
        # Check for specific config directory
        if [ -d "results/${{ github.event.inputs.lender_config_id }}" ]; then
          echo "✅ Analysis completed successfully!"
          echo ""
          echo "📁 Generated Files:"
          find results/${{ github.event.inputs.lender_config_id }} -type f | head -20
          echo ""
          
          # Show file sizes
          echo "📏 File Sizes:"
          du -h results/${{ github.event.inputs.lender_config_id }}/* 2>/dev/null | head -10 || echo "No files to measure"
          echo ""
          
          # Show summary report if exists
          if [ -f "results/${{ github.event.inputs.lender_config_id }}/summary_report_${{ github.event.inputs.lender_config_id }}_${{ github.event.inputs.lead_source }}.md" ]; then
            echo "📋 Summary Report Preview:"
            echo "========================="
            head -50 "results/${{ github.event.inputs.lender_config_id }}/summary_report_${{ github.event.inputs.lender_config_id }}_${{ github.event.inputs.lead_source }}.md"
          fi
          
          # Show JSON analysis if exists
          if [ -f "results/${{ github.event.inputs.lender_config_id }}/ab_testing_analysis_${{ github.event.inputs.lender_config_id }}_${{ github.event.inputs.lead_source }}.json" ]; then
            echo ""
            echo "🔬 A/B Testing Analysis Preview:"
            echo "==============================="
            head -20 "results/${{ github.event.inputs.lender_config_id }}/ab_testing_analysis_${{ github.event.inputs.lender_config_id }}_${{ github.event.inputs.lead_source }}.json"
          fi
        else
          echo "❌ Analysis failed or no results generated for config ${{ github.event.inputs.lender_config_id }}"
          echo ""
          echo "🔍 Debugging Information:"
          echo "- Results directory exists: $(test -d results && echo 'YES' || echo 'NO')"
          echo "- Config directory exists: $(test -d results/${{ github.event.inputs.lender_config_id }} && echo 'YES' || echo 'NO')"
          echo ""
          echo "💡 Common causes:"
          echo "1. Invalid lender config ID - run 'List Configuration Options' to see valid IDs"
          echo "2. Lead source not found for this config"
          echo "3. Repository access issues (check authentication)"
          echo "4. Analysis mode incompatible with this configuration"
          echo ""
          echo "🔧 Suggested actions:"
          echo "1. Verify the config ID exists: run 'List Configuration Options' workflow"
          echo "2. Check the workflow logs above for specific error messages"
          echo "3. Try with 'ab-testing' mode instead of 'complete'"
          echo "4. Ensure TSOCIAL_ACCESS_TOKEN is set if using private repositories"
        fi
        
        echo ""
        echo "💾 Download the 'ui-version-analysis-results-${{ github.event.inputs.lender_config_id }}-${{ github.event.inputs.lead_source }}' artifact to get all generated files"

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const configId = '${{ github.event.inputs.lender_config_id }}';
          const leadSource = '${{ github.event.inputs.lead_source }}';
          const resultsDir = `results/${configId}`;
          
          let comment = `## 🔍 UI Version Analysis Results\n\n`;
          comment += `**Configuration:** ${configId} (${leadSource})\n`;
          comment += `**Mode:** ${{ github.event.inputs.workflow_mode }}\n`;
          comment += `**Config Path:** ${{ github.event.inputs.config_path }}\n\n`;
          
          if (fs.existsSync(resultsDir)) {
            comment += `✅ Analysis completed successfully!\n\n`;
            comment += `📁 **Generated Files:**\n`;
            
            const files = fs.readdirSync(resultsDir);
            files.forEach(file => {
              comment += `- ${file}\n`;
            });
            
            comment += `\n💾 Download the analysis results from the workflow artifacts.`;
          } else {
            comment += `❌ Analysis failed. Check the workflow logs for details.`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 